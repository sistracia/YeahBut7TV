# Generated by ariadne-codegen
# Source: ./graphql/schema.graphql

from typing import Any, List, Optional

from .base_model import BaseModel
from .enums import EmoteSearchCategory, ReportStatus, SortOrder, SubscriptionPeriodKind


class CosmeticPaintInput(BaseModel):
    name: str
    function: Any
    color: Optional[int] = None
    angle: Optional[int] = None
    shape: Optional[Any] = None
    image_url: Optional[str] = None
    repeat: bool
    stops: List["CosmeticPaintStopInput"]
    shadows: List["CosmeticPaintShadowInput"]


class CosmeticPaintShadowInput(BaseModel):
    x_offset: str
    y_offset: str
    radius: str
    color: int


class CosmeticPaintStopInput(BaseModel):
    at: float
    color: int


class CreateEmoteSetInput(BaseModel):
    name: str
    privileged: Optional[bool] = None


class CreateReportInput(BaseModel):
    target_kind: int
    target_id: Any
    subject: str
    body: str


class CreateRoleInput(BaseModel):
    name: str
    color: int
    allowed: str
    denied: str


class EditReportInput(BaseModel):
    priority: Optional[int] = None
    status: Optional[ReportStatus] = None
    assignee: Optional[str] = None
    note: Optional["EditReportNoteInput"] = None


class EditReportNoteInput(BaseModel):
    timestamp: Optional[str] = None
    content: Optional[str] = None
    internal: Optional[bool] = None
    reply: Optional[str] = None


class EditRoleInput(BaseModel):
    name: Optional[str] = None
    color: Optional[int] = None
    allowed: Optional[str] = None
    denied: Optional[str] = None
    position: Optional[int] = None


class EmoteSearchFilter(BaseModel):
    category: Optional[EmoteSearchCategory] = None
    case_sensitive: Optional[bool] = None
    exact_match: Optional[bool] = None
    ignore_tags: Optional[bool] = None
    animated: Optional[bool] = None
    zero_width: Optional[bool] = None
    authentic: Optional[bool] = None
    aspect_ratio: Optional[str] = None
    personal_use: Optional[bool] = None


class EmoteSetOriginInput(BaseModel):
    id: Any
    weight: Optional[int] = None
    slices: Optional[List[int]] = None


class EmoteUpdate(BaseModel):
    name: Optional[str] = None
    version_name: Optional[str] = None
    version_description: Optional[str] = None
    flags: Optional[Any] = None
    owner_id: Optional[Any] = None
    tags: Optional[List[str]] = None
    listed: Optional[bool] = None
    personal_use: Optional[bool] = None
    deleted: Optional[bool] = None


class Sort(BaseModel):
    value: str
    order: SortOrder


class SubscriptionPeriodCreate(BaseModel):
    product_id: Any
    kind: SubscriptionPeriodKind
    start: Any
    end: Any
    reason: str
    invoice: Optional["SubscriptionPeriodCreateInvoiceData"] = None


class SubscriptionPeriodCreateInvoiceData(BaseModel):
    price: float
    currency: Optional[str] = None


class UpdateEmoteSetInput(BaseModel):
    name: Optional[str] = None
    capacity: Optional[int] = None
    origins: Optional[List["EmoteSetOriginInput"]] = None


class UserConnectionUpdate(BaseModel):
    emote_set_id: Optional[Any] = None
    unlink: Optional[bool] = None


class UserCosmeticUpdate(BaseModel):
    id: Any
    kind: Any
    selected: bool


class UserEditorUpdate(BaseModel):
    permissions: Optional[Any] = None
    visible: Optional[bool] = None


CosmeticPaintInput.model_rebuild()
EditReportInput.model_rebuild()
SubscriptionPeriodCreate.model_rebuild()
UpdateEmoteSetInput.model_rebuild()
