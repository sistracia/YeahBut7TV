# Generated by ariadne-codegen
# Source: ./graphql/queries.graphql

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .input_types import EmoteSearchFilter, Sort
from .search_emotes import SearchEmotes


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def search_emotes(
        self,
        query: str,
        page: Union[Optional[int], UnsetType] = UNSET,
        sort: Union[Optional[Sort], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        filter: Union[Optional[EmoteSearchFilter], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchEmotes:
        _query = gql(
            """
            query SearchEmotes($query: String!, $page: Int, $sort: Sort, $limit: Int, $filter: EmoteSearchFilter) {
              emotes(query: $query, page: $page, sort: $sort, limit: $limit, filter: $filter) {
                count
                items {
                  id
                  name
                  host {
                    url
                    files {
                      name
                      width
                      height
                      format
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "query": query,
            "page": page,
            "sort": sort,
            "limit": limit,
            "filter": filter,
        }
        response = await self.execute(
            query=_query, operation_name="SearchEmotes", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SearchEmotes.model_validate(data)
